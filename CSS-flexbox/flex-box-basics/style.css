/*

https://css-tricks.com/snippets/css/a-guide-to-flexbox/#background

/*

/*
here above is the link for the flex boxes
*/



/*
h1{
    font-size: 150px;
    font-family:Georgia, 'Times New Roman', Times, serif;
    font-weight:900;
    background-image:url(https://media.tenor.com/images/b88386ee740d713ce3417515465daefb/tenor.gif); 
    background-clip:text;
    -webkit-background-clip: text;
    background-size: cover;
    color: transparent;
}
h2{
    font-size: 100px;
    height: 100px;
    width: 100px;
    text-shadow:gray 10px 10px 5px;
}
*/
/*
now here we define a container inside the container
we are going to write some of the boxes inside that contaier
the purpose of the flex box is to generate the boxes flexible that 
even if we dont know the size of the screen it will display
according to the sizes of the screen that is used for flex box
and it has variour functionalities here below we difine
div.flex-container that is the parent container for all div.flex-items
*/
div.flex-container {
  margin-left: 300px;
  height: 800px;
  width: 800px;
  background-color: bisque;
  /*here below we are writing display flex inside the parent container
    that dispaly:flex will be applicable for all the direct childrens of the
    current container
    now that means the entire items that are present in the current container
    will behave like flex boxes

    This defines a flex container; inline or block depending on the given value. It enables a flex context for all its direct children.
    */
  display: flex;

  /*
    By default, flex items will all try to fit onto one line. 
    You can change that and allow the items to wrap as needed with this property.
    nowrap (default): all flex items will be on one line
    wrap: flex items will wrap onto multiple lines, from top to bottom.
    wrap-reverse: flex items will wrap onto multiple lines from bottom to top.
    */
  flex-wrap: wrap;
  /*
    row (default): left to right in ltr; right to left in rtl
    row-reverse: right to left in ltr; left to right in rtl
    column: same as row but top to bottom
    column-reverse: same as row-reverse but bottom to top
    */
  flex-direction: row;

  /*
    here we can wrap the flex-box how we need either in row wrap that is default
    or the column wrap that is the below how it works 1 2 3 4 and then 5 6 7 in columns
    default os row nowrap that means that no wrapping it will fit in online
    and row wise left or right
    */
  flex-flow: column wrap;
  flex-flow: row wrap;
  /*
    This defines the alignment along the main axis. 
    It helps distribute extra free space leftover when either 
    all the flex items on a line are inflexible,
    or are flexible but have reached their maximum size. 
    It also exerts some control over the alignment of items 
    when they overflow the line.


    flex-start (default): items are packed toward the start of the flex-direction.
    flex-end: items are packed toward the end of the flex-direction.
    start: items are packed toward the start of the writing-mode direction.
    end: items are packed toward the end of the writing-mode direction.
    left: items are packed toward left edge of the container, unless that doesn’t make sense with the flex-direction, then it behaves like start.
    right: items are packed toward right edge of the container, unless that doesn’t make sense with the flex-direction, then it behaves like end.
    center: items are centered along the line
    space-between: items are evenly distributed in the line; first item is on the start line, last item on the end line
    space-around: items are evenly distributed in the line with equal space around them. Note that visually the spaces aren’t equal, since all the items have equal space on both sides. The first item will have one unit of space against the container edge, but two units of space between the next item because that next item has its own spacing that applies.
    space-evenly: items are distributed so that the spacing between any two items (and the space to the edges) is equal.




    and it defines how the spacing will work and where the flex items 
    will stick either left or right or spacing them equally
    justify content
    */
  justify-content: center;
  justify-content: space-evenly;
  justify-content: left;
  justify-content: flex-end;
  justify-content: space-around;

  /*
    here align items will work on if we are using multuiple flex-boxes
    or multuple items on the same row or same column are having different
    size and then we must use this align-items to set their items to a sequence
    if they dont have same size
    here the align-items:stretcb is the default one    */
  align-items: stretch;
  align-items: flex-start;
  align-items: flex-end;
  align-items: baseline;

  /*
    normal (default): items are packed in their default position as if no value was set.
flex-start / start: items packed to the start of the container. The (more supported) flex-start honors the flex-direction while start honors the writing-mode direction.
flex-end / end: items packed to the end of the container. The (more support) flex-end honors the flex-direction while end honors the writing-mode direction.
center: items centered in the container
space-between: items evenly distributed; the first line is at the start of the container while the last one is at the end
space-around: items evenly distributed with equal space around each line
space-evenly: items are evenly distributed with equal space around them
stretch: lines stretch to take up the remaining space
    */
  align-content: flex-end;
  align-content: flex-start;
}
div.flex-items {
  margin: 10px;
  height: 100px;
  width: 100px;
  border: solid black 1px;
  background-color: cadetblue;
  /*
  This defines the ability for a flex item to grow if necessary. 
  It accepts a unitless value that serves as a proportion. It dictates what amount of
  the available space inside the flex container the item should take up.
  If all items have flex-grow set to 1, the remaining space in the container will be
  distributed equally to all children. If one of the children has a value of 2, the remaining 
  space would take up twice as much space as the others (or it will try to, at least)
  */
  flex-grow: 0;

  /*
  This defines the ability for a flex item to shrink if necessary.
  */
  flex-shrink: 3;
  /*
  This allows the default alignment
   (or the one specified by align-items) 
   to be overridden for individual flex items.
  */
  align-self: flex-end;
}

/*
div.one {
  padding: 10px;
  height: 200px;
  width: 100px;
}
div.two {
  height: 400px;
  width: 50px;
}
*/
